name: Create Release

on:
  push:
    tags:
      - 'v*.*.*' # Trigger on tags like v1.0.0, v0.1.2, etc.

jobs:
  build_release_apk:
    name: Build Release APK
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # Placeholder for setting up signing configurations
      # In a real scenario, you would use secrets for keystore password, alias, key password
      # and potentially create a signing configuration file from these secrets.
      - name: Setup Release Signing (Placeholder)
        run: |
          echo "RELEASE_STORE_FILE_BASE64=${{ secrets.RELEASE_STORE_FILE_BASE64 }}" >> $GITHUB_ENV
          echo "RELEASE_STORE_PASSWORD=${{ secrets.RELEASE_STORE_PASSWORD }}" >> $GITHUB_ENV
          echo "RELEASE_KEY_ALIAS=${{ secrets.RELEASE_KEY_ALIAS }}" >> $GITHUB_ENV
          echo "RELEASE_KEY_PASSWORD=${{ secrets.RELEASE_KEY_PASSWORD }}" >> $GITHUB_ENV
          echo "Simulating creation of local.properties or using env vars in build.gradle for signing"
          # Example: if [ -n "$RELEASE_STORE_FILE_BASE64" ]; then
          # base64 -d <<< "$RELEASE_STORE_FILE_BASE64" > release.keystore
          # echo "signing.storeFile=release.keystore" >> local.properties
          # echo "signing.storePassword=$RELEASE_STORE_PASSWORD" >> local.properties
          # echo "signing.keyAlias=$RELEASE_KEY_ALIAS" >> local.properties
          # echo "signing.keyPassword=$RELEASE_KEY_PASSWORD" >> local.properties
          # fi


      - name: Build Release APK
        run: ./gradlew assembleRelease # Assumes signingConfig 'release' is set up in build.gradle

      - name: Upload Release APK
        uses: actions/upload-artifact@v3
        with:
          name: app-release.apk
          path: app/build/outputs/apk/release/app-release.apk # Adjust path as needed

  create_github_release:
    name: Create GitHub Release
    needs: build_release_apk # Run after APK is built
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required to create a release
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download Release APK from build job
        uses: actions/download-artifact@v3
        with:
          name: app-release.apk
          path: . # Download to current directory

      - name: Get tag name
        id: get_tag
        run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        # env:
        #   GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Automatically available
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: Release ${{ env.TAG_NAME }}
          body: |
            Release notes for version ${{ env.TAG_NAME }}.
            (Auto-generated by GitHub Actions)

            **Attached Files:**
            - app-release.apk
          draft: false # Set to true if you want to manually publish later
          prerelease: false # Set to true if this is a pre-release
          files: |
            app-release.apk
            # Add other artifacts like mapping files, AABs, etc.
            # app/build/outputs/bundle/release/app-release.aab
            # app/build/outputs/mapping/release/mapping.txt
        # Note: softprops/action-gh-release v1 is used. Check for latest stable version.

  # Optional: Build and Upload App Bundle (AAB)
  build_release_aab:
    name: Build Release AAB
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
      # Similar signing setup as for APK
      - name: Build Release AAB
        run: ./gradlew bundleRelease
      - name: Upload Release AAB
        uses: actions/upload-artifact@v3
        with:
          name: app-release.aab
          path: app/build/outputs/bundle/release/app-release.aab
      # This AAB can also be added to the GitHub Release files in the `create_github_release` job
      # by downloading it there and adding to the `files` list.
yaml
File '.github/workflows/release.yml' created successfully.
