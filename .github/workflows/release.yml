name: Android Release

on:
  push:
    tags:
      - 'v*.*.*' # Trigger on version tags like v1.0.0

jobs:
  build_release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # Add steps for setting up signing keys from GitHub Secrets
      # For example:
      # - name: Decode Keystore
      #   env:
      #     ENCODED_KEYSTORE: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
      #     KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
      #     KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
      #     KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
      #   run: |
      #     echo $ENCODED_KEYSTORE | base64 --decode > app/release.keystore
      #     echo "storeFile=release.keystore" >> gradle.properties
      #     echo "storePassword=$KEYSTORE_PASSWORD" >> gradle.properties
      #     echo "keyAlias=$KEY_ALIAS" >> gradle.properties
      #     echo "keyPassword=$KEY_PASSWORD" >> gradle.properties
      # This assumes your app/build.gradle.kts is configured to read these from gradle.properties for release signing.

      - name: Build Release APK
        run: ./gradlew assembleRelease # Or bundleRelease for AAB

      - name: Get Version Name
        id: get_version
        run: echo "APP_VERSION=$(echo ${{ github.ref_name }} | sed 's/v//')" >> $GITHUB_OUTPUT


      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.get_version.outputs.APP_VERSION }}
          body: |
            Automated release for version ${{ steps.get_version.outputs.APP_VERSION }}
            (Changelog details can be added here manually or via other actions)
          draft: false
          prerelease: false

      - name: Upload Release APK to GitHub Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: app/build/outputs/apk/release/app-release-unsigned.apk # Change to app-release.apk if signed, or .aab
          asset_name: tomato-media-center-${{ steps.get_version.outputs.APP_VERSION }}.apk # Or .aab
          asset_content_type: application/vnd.android.package-archive

      # Optional: Upload Proguard mapping file
      # - name: Upload Mapping File to GitHub Release
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: app/build/outputs/mapping/release/mapping.txt
      #     asset_name: mapping-${{ steps.get_version.outputs.APP_VERSION }}.txt
      #     asset_content_type: text/plain
